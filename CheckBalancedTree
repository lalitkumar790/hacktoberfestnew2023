#include <iostream>
#include <cmath>

class TreeNode {
public:
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int height(TreeNode* root) {
        if (root == nullptr)
            return 0;

        int leftHeight = height(root->left);
        int rightHeight = height(root->right);

        return std::max(leftHeight, rightHeight) + 1;
    }

    bool isBalanced(TreeNode* root) {
        if (root == nullptr)
            return true;

        int leftHeight = height(root->left);
        int rightHeight = height(root->right);

        if (abs(leftHeight - rightHeight) <= 1 &&
            isBalanced(root->left) && isBalanced(root->right))
            return true;

        return false;
    }
};

int main() {
    // Example 1
    TreeNode* root1 = new TreeNode(1);
    root1->left = new TreeNode(2);
    root1->left->right = new TreeNode(3);
    Solution sol1;
    std::cout << "Example 1: " << sol1.isBalanced(root1) << std::endl;

    // Example 2
    TreeNode* root2 = new TreeNode(10);
    root2->left = new TreeNode(20);
    root2->right = new TreeNode(30);
    root2->left->left = new TreeNode(40);
    root2->left->right = new TreeNode(60);
    Solution sol2;
    std::cout << "Example 2: " << sol2.isBalanced(root2) << std::endl;

    return 0;
}
